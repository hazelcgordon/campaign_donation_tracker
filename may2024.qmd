---
title: "Pre poll donations 2019 GE"
---

Goals for this page:

- Create data summaries for the following questions ready for comparison with 2024 data:
  - Total donated to each party, classified as official pre-poll regulatory period
  - Table to get a sense of lots of small donations, or a few big ones, and where were they coming from.
  - Plot of type of donor and total amount donated across each week.
  - From the 2019 data - how much money was received by central parties during the election period, without it being reported as pre-poll?

```{r include=FALSE}

library(tidyverse)
library(knitr)
library(kableExtra)

```

```{r include=FALSE}

#creating a merged dataset with new column for the pre-poll period

alldonations2019 <- read.csv("data2019/alldonations_2019.csv")

# Remove £ sign and convert to numeric
alldonations2019$Value <- as.numeric(gsub("[£,\"]", "", alldonations2019$Value))

```

```{r include=FALSE}

#this block creates a dataset with only central party donations during pre-poll period 1-6

#delete unnecessary rows

central_party <- alldonations2019 %>%
  filter(ReportingPeriodName == "Pre-Poll 1 - Party(06/11/19 - 12/11/19) UKPGE 2019"|
         ReportingPeriodName == "Pre-Poll 2 - Party(13/11/19 - 19/11/19) UKPGE 2019"|
         ReportingPeriodName == "Pre-Poll 3 - Party(20/11/19 - 26/11/19) UKPGE 2019"|
         ReportingPeriodName == "Pre-Poll 4 - Party(27/11/19 - 03/12/19) UKPGE 2019"|
         ReportingPeriodName == "Pre-Poll 5 - Party(04/12/19 - 10/12/19) UKPGE 2019"|
         ReportingPeriodName == "Pre-Poll 6 - Party(11/12/19 - 12/12/19) UKPGE 2019")

# remove public funds

central_party <- central_party %>%
  filter(!DonorStatus == "Public Fund")

#keep only relevant columns

central_party <- central_party %>%
  select(RegulatedEntityName, ReportingPeriodName, ReceivedDate, Value, DonorStatus, DonorName)

```

The table below only include donations that were classified under 'Pre-poll party' for the 6 weeks leading up to the elections, removing any public funds. This might not be representative of actual amounts, because there were many donations made to parties not disclosed until Jan 2020 and put under the label of 'Q4 2019' or just at the time period they were eventually reported. 

```{r include=FALSE}

# shorten names for parties

central_party <- central_party %>%
  mutate(RegulatedEntityName = str_replace_all(RegulatedEntityName, fixed("Advance Together [De-registered 01/10/20]"), "Advance Together"),
         RegulatedEntityName = str_replace_all(RegulatedEntityName, fixed("Conservative and Unionist Party"), "Conservative Party"),
         RegulatedEntityName = str_replace_all(RegulatedEntityName, fixed("Plaid Cymru - The Party of Wales"), "Plaid Cymru"),
         RegulatedEntityName = str_replace_all(RegulatedEntityName, fixed("Scottish National Party (SNP)"), "SNP"),
         RegulatedEntityName = str_replace_all(RegulatedEntityName, fixed("Alliance - Alliance Party of Northern Ireland"), "Alliance")
         )

#set key variables as factors

central_party$RegulatedEntityName <- factor(central_party$RegulatedEntityName, levels = c("Conservative Party", "Labour Party", "Liberal Democrats", "Green Party", "Advance Together", "Reform UK", "Plaid Cymru", "Alliance", "SNP", "Renew", "Women's Equality Party"))

central_party$DonorStatus <- factor(central_party$DonorStatus, levels = c("Individual", "Trade Union", "Company", "Public Fund", "Unincorporated Association", "Limited Liability Partnership"))

central_party$ReportingPeriodName <- factor(central_party$ReportingPeriodName, levels = c("Pre-Poll 1 - Party(06/11/19 - 12/11/19) UKPGE 2019", "Pre-Poll 2 - Party(13/11/19 - 19/11/19) UKPGE 2019", "Pre-Poll 3 - Party(20/11/19 - 26/11/19) UKPGE 2019", "Pre-Poll 4 - Party(27/11/19 - 03/12/19) UKPGE 2019", "Pre-Poll 5 - Party(04/12/19 - 10/12/19) UKPGE 2019", "Pre-Poll 6 - Party(11/12/19 - 12/12/19) UKPGE 2019"))

```

```{r echo=FALSE}

# Create a complete data frame with all combinations of Party Name and Regulation Pre-Poll period

df_prepoll <- expand.grid(RegulatedEntityName = 
                            levels(central_party$RegulatedEntityName), 
                         ReportingPeriodName = 
                           unique(central_party$ReportingPeriodName)
                         )

# merge the values with each combo

prepoll_table <- df_prepoll %>%
  left_join(central_party %>%
              group_by(RegulatedEntityName, ReportingPeriodName) %>%
            summarise(TotalValue = sum(Value, na.rm = TRUE), 
                      .groups = 'drop'),
            by = c("RegulatedEntityName", "ReportingPeriodName"))

prepoll_table$TotalValue[is.na(prepoll_table$TotalValue)] <- 0

#Convert value to money format

prepoll_table$TotalValue <- round(prepoll_table$TotalValue)
prepoll_table$TotalValue <- sprintf("£%s", format(prepoll_table$TotalValue, big.mark = ",", scientific = FALSE))

#convert to a wide format

prepoll_table <- prepoll_table %>%
  pivot_wider(names_from = ReportingPeriodName,
              values_from = TotalValue)

#re-order columns

prepoll_table <- prepoll_table %>%
  select(RegulatedEntityName, `Pre-Poll 1 - Party(06/11/19 - 12/11/19) UKPGE 2019`, `Pre-Poll 2 - Party(13/11/19 - 19/11/19) UKPGE 2019`, `Pre-Poll 3 - Party(20/11/19 - 26/11/19) UKPGE 2019`, `Pre-Poll 4 - Party(27/11/19 - 03/12/19) UKPGE 2019`, `Pre-Poll 5 - Party(04/12/19 - 10/12/19) UKPGE 2019`, `Pre-Poll 6 - Party(11/12/19 - 12/12/19) UKPGE 2019`)

# create a totals column

column_totals <- prepoll_table %>%
  summarise(across(where(is.character), ~ sum(as.numeric(gsub("[£,]", "", .)), na.rm = TRUE))) %>%
  mutate(RegulatedEntityName = "Total") %>%
  mutate(across(where(is.numeric), ~ sprintf("£%s", format(.x, big.mark = ",", scientific = FALSE))))

# bind totals column with dataframe

prepoll_table <- rbind(prepoll_table, column_totals)

```

```{r echo=FALSE}

# Remove the first column title
names(prepoll_table)[1] <- ""

# Use kable to create a nicely formatted table
table_time <- kable(prepoll_table, col.names = c("", "1", "2", "3", "4", "5", "6")) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE) %>%
  column_spec(1, bold = TRUE) %>%
  row_spec(nrow(prepoll_table), bold = TRUE, color = "white", background = "black") %>%
  add_header_above(c(" " = 1, "week (pre-poll period 2019 GE)" = ncol(prepoll_table) - 1), bold = TRUE) %>%
  row_spec(0, align = "center")

table_time

```

### What was the average donation and donation frequency?

```{r include=FALSE}

# Create a complete data frame with all combinations of Party Name and Donor Status
df_donationsize <- expand.grid(
  DonorStatus = unique(central_party$DonorStatus), 
  RegulatedEntityName = levels(central_party$RegulatedEntityName)
)

size_table <- df_donationsize %>%
  left_join(central_party %>%
              group_by(RegulatedEntityName, DonorStatus) %>%
              summarise(Frequency = n(),
                        TotalSum = sum(Value, na.rm = TRUE),
                        .groups = 'drop'),
            by = c("RegulatedEntityName", "DonorStatus")) %>%
  mutate(Frequency = ifelse(is.na(Frequency), 0, Frequency))

size_table$TotalSum[is.na(size_table$TotalSum)] <- 0

#calculate the average donation for each category

size_table <- size_table %>%
  mutate(Average = TotalSum/Frequency)

size_table$Average[is.na(size_table$Average)] <- 0

```

```{r echo=FALSE}

#remove decimal places on money values

size_table$TotalSum <- round(size_table$TotalSum)
size_table$Average <- round(size_table$Average)

#convert numbers into pound values

size_table$TotalSum <- sprintf("£%s", format(size_table$TotalSum, big.mark = ",", scientific = FALSE))

size_table$Average <- sprintf("£%s", format(size_table$Average, big.mark = ",", scientific = FALSE))

# change the order

size_table <- size_table %>%
  select(RegulatedEntityName, DonorStatus, Frequency, Average, TotalSum)

# Replace repeated party names with empty strings except for the first occurrence
size_table$RegulatedEntityName <- as.character(size_table$RegulatedEntityName)
for (party in unique(size_table$RegulatedEntityName)) {
  party_indices <- which(size_table$RegulatedEntityName == party)
  size_table$RegulatedEntityName[party_indices[-1]] <- ""
}

# swap NA's for blank spaces

size_table$RegulatedEntityName <- as.character(size_table$RegulatedEntityName)

size_table <- size_table %>%
  mutate_all(~ replace_na(., ""))

#create the table

average_donation <- kable(size_table, col.names = c("", "Donor Type", "No. Donations", "Average Size", "Total"), align = 'c') %>%
  kable_styling(full_width = FALSE) %>%
  column_spec(1, width = "2.5cm", extra_css = "text-align: left;") %>%
  column_spec(2, width = "4cm", extra_css = "text-align: left;") %>%
  column_spec(3, width = "3cm", extra_css = "text-align: center;") %>%
  column_spec(4, width = "3cm", extra_css = "text-align: center;") %>%
  column_spec(5, width = "3cm", extra_css = "text-align: center;")

average_donation

```


