---
title: "Pre poll donations 2019 GE"
format:
  html:
    css: styles.css
---

```{r include=FALSE}

# Function to format numbers as currency
format_currency <- function(x) {
  scales::dollar(x, prefix = "£", big.mark = ",", accuracy = 1)
}

```


### How much did each party recieve in donations over the 2019 pre-poll period?

The table below only include donations to central parties that were classified under 'Pre-poll party' for the 6 weeks leading up to the elections, also removing any public funds. In the Electoral Commission donation search, these donations can be searched for under the following labels:

- Pre-Poll 1 - Party(06/11/19 - 12/11/19) UKPGE 2019
- Pre-Poll 2 - Party(13/11/19 - 19/11/19) UKPGE 2019
- Pre-Poll 3 - Party(20/11/19 - 26/11/19) UKPGE 2019
- Pre-Poll 4 - Party(27/11/19 - 03/12/19) UKPGE 2019
- Pre-Poll 5 - Party(04/12/19 - 10/12/19) UKPGE 2019
- Pre-Poll 6 - Party(11/12/19 - 12/12/19) UKPGE 2019 *(final 2 days)*

This might not be representative of actual amounts, because there were donations made to parties not disclosed until Jan 2020 and put under the label of 'Q4 2019' or just at the time period they were eventually reported. 

```{r include=FALSE}

library(tidyverse)
library(knitr)
library(kableExtra)
library(plotly)
library(scales)
library(lubridate)

```

```{r include=FALSE}

#creating a merged dataset with new column for the pre-poll period

alldonations2019 <- read.csv("data2019/2019_q4_donations.csv")

# Remove £ sign and convert to numeric
alldonations2019$Value <- as.numeric(gsub("[£,\"]", "", alldonations2019$Value))

```

```{r include=FALSE}

#this block creates a dataset with only central party donations during pre-poll period 1-6

#delete unnecessary rows

central_party <- alldonations2019 %>%
  filter(ReportingPeriodName == "Pre-Poll 1 - Party(06/11/19 - 12/11/19) UKPGE 2019"|
         ReportingPeriodName == "Pre-Poll 2 - Party(13/11/19 - 19/11/19) UKPGE 2019"|
         ReportingPeriodName == "Pre-Poll 3 - Party(20/11/19 - 26/11/19) UKPGE 2019"|
         ReportingPeriodName == "Pre-Poll 4 - Party(27/11/19 - 03/12/19) UKPGE 2019"|
         ReportingPeriodName == "Pre-Poll 5 - Party(04/12/19 - 10/12/19) UKPGE 2019"|
         ReportingPeriodName == "Pre-Poll 6 - Party(11/12/19 - 12/12/19) UKPGE 2019")

# remove public funds

central_party <- central_party %>%
  filter(!DonorStatus == "Public Fund")

#keep only relevant columns

central_party <- central_party %>%
  select(RegulatedEntityName, ReportingPeriodName, ReceivedDate, Value, DonorStatus, DonorName)

```

```{r include=FALSE}

# shorten names for parties

central_party <- central_party %>%
  mutate(RegulatedEntityName = str_replace_all(RegulatedEntityName, fixed("Advance Together [De-registered 01/10/20]"), "Advance Together"),
         RegulatedEntityName = str_replace_all(RegulatedEntityName, fixed("Conservative and Unionist Party"), "Conservative Party"),
         RegulatedEntityName = str_replace_all(RegulatedEntityName, fixed("Plaid Cymru - The Party of Wales"), "Plaid Cymru"),
         RegulatedEntityName = str_replace_all(RegulatedEntityName, fixed("Scottish National Party (SNP)"), "SNP"),
         RegulatedEntityName = str_replace_all(RegulatedEntityName, fixed("Alliance - Alliance Party of Northern Ireland"), "Alliance")
         )

#set key variables as factors

central_party$RegulatedEntityName <- factor(central_party$RegulatedEntityName, levels = c("Conservative Party", "Labour Party", "Liberal Democrats", "Green Party", "Advance Together", "Reform UK", "Plaid Cymru", "Alliance", "SNP", "Renew", "Women's Equality Party"))

central_party$DonorStatus <- factor(central_party$DonorStatus, levels = c("Individual", "Trade Union", "Company", "Public Fund", "Unincorporated Association", "Limited Liability Partnership"))

central_party$ReportingPeriodName <- factor(central_party$ReportingPeriodName, levels = c("Pre-Poll 1 - Party(06/11/19 - 12/11/19) UKPGE 2019", "Pre-Poll 2 - Party(13/11/19 - 19/11/19) UKPGE 2019", "Pre-Poll 3 - Party(20/11/19 - 26/11/19) UKPGE 2019", "Pre-Poll 4 - Party(27/11/19 - 03/12/19) UKPGE 2019", "Pre-Poll 5 - Party(04/12/19 - 10/12/19) UKPGE 2019", "Pre-Poll 6 - Party(11/12/19 - 12/12/19) UKPGE 2019"))

```

```{r echo=FALSE}

# Create a complete data frame with all combinations of Party Name and Regulation Pre-Poll period

df_prepoll <- expand.grid(RegulatedEntityName = 
                            levels(central_party$RegulatedEntityName), 
                         ReportingPeriodName = 
                           unique(central_party$ReportingPeriodName)
                         )

# merge the values with each combo

prepoll_table <- df_prepoll %>%
  left_join(central_party %>%
              group_by(RegulatedEntityName, ReportingPeriodName) %>%
            summarise(TotalValue = sum(Value, na.rm = TRUE), 
                      .groups = 'drop'),
            by = c("RegulatedEntityName", "ReportingPeriodName"))

prepoll_table$TotalValue[is.na(prepoll_table$TotalValue)] <- 0

#Convert value to money format

prepoll_table$TotalValue <- round(prepoll_table$TotalValue)
prepoll_table$TotalValue <- sprintf("£%s", format(prepoll_table$TotalValue, big.mark = ",", scientific = FALSE))

#convert to a wide format

prepoll_table <- prepoll_table %>%
  pivot_wider(names_from = ReportingPeriodName,
              values_from = TotalValue)

#re-order columns

prepoll_table <- prepoll_table %>%
  select(RegulatedEntityName, `Pre-Poll 1 - Party(06/11/19 - 12/11/19) UKPGE 2019`, `Pre-Poll 2 - Party(13/11/19 - 19/11/19) UKPGE 2019`, `Pre-Poll 3 - Party(20/11/19 - 26/11/19) UKPGE 2019`, `Pre-Poll 4 - Party(27/11/19 - 03/12/19) UKPGE 2019`, `Pre-Poll 5 - Party(04/12/19 - 10/12/19) UKPGE 2019`, `Pre-Poll 6 - Party(11/12/19 - 12/12/19) UKPGE 2019`)

# create a totals column

prepoll_table <- prepoll_table %>%
  mutate(Total = rowSums(across(where(is.character), ~ as.numeric(gsub("[£,]", "", .))), na.rm = TRUE)) %>%
  mutate(Total = sprintf("£%s", format(Total, big.mark = ",", scientific = FALSE)))

# create a totals row

column_totals <- prepoll_table %>%
  summarise(across(where(is.character), ~ sum(as.numeric(gsub("[£,]", "", .)), na.rm = TRUE))) %>%
  mutate(RegulatedEntityName = "Total") %>%
  mutate(across(where(is.numeric), ~ sprintf("£%s", format(.x, big.mark = ",", scientific = FALSE))))

# bind totals column with dataframe

prepoll_table <- rbind(prepoll_table, column_totals)

```

```{r echo=FALSE}

# Remove the first column title
names(prepoll_table)[1] <- ""

# Used kable to create a formatted table
table_time <- kable(prepoll_table, col.names = c("", "1", "2", "3", "4", "5", "6", "Total")) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE) %>%
  column_spec(1, bold = TRUE) %>%
  row_spec(nrow(prepoll_table), bold = TRUE, color = "white", background = "black") %>%
  add_header_above(c(" " = 1, "week (pre-poll period 2019 GE)" = ncol(prepoll_table) - 1), bold = TRUE) %>%
  row_spec(0, align = "center")

table_time

```

### What was the average donation and donation frequency?

This table is intended to be used to comparison with the 2024 data to see if the changes to the law affected donations.

In 2019, the conservatives received huge sums, particularly from individual donors. As well as receiving way more in donations, they also received much larger sums of money from individuals and companies on average compared to Labour. Interestingly, the Lib Dems received more individual donations than Labour (and equally as many company ones as them), also with a higher average donation amount for both donor types. 

As might be expected, the Labour Party total donation amount received was boosted by Trade Unions, with 28 donations and an average of huge sums, adding up to 5 mil. 

Reform UK received a massive amount considering their total was made up of only 9 individual donations, with an average donation amount of 400,000.

```{r include=FALSE}

# Create a complete data frame with all combinations of Party Name and Donor Status
df_donationsize <- expand.grid(
  DonorStatus = unique(central_party$DonorStatus), 
  RegulatedEntityName = levels(central_party$RegulatedEntityName)
)

size_table <- df_donationsize %>%
  left_join(central_party %>%
              group_by(RegulatedEntityName, DonorStatus) %>%
              summarise(Frequency = n(),
                        TotalSum = sum(Value, na.rm = TRUE),
                        .groups = 'drop'),
            by = c("RegulatedEntityName", "DonorStatus")) %>%
  mutate(Frequency = ifelse(is.na(Frequency), 0, Frequency))

size_table$TotalSum[is.na(size_table$TotalSum)] <- 0

#calculate the average donation for each category

size_table <- size_table %>%
  mutate(Average = TotalSum/Frequency)

size_table$Average[is.na(size_table$Average)] <- 0

```

```{r echo=FALSE}

#remove decimal places on money values

size_table$TotalSum <- round(size_table$TotalSum)
size_table$Average <- round(size_table$Average)

#convert numbers into pound values

size_table$TotalSum <- sprintf("£%s", format(size_table$TotalSum, big.mark = ",", scientific = FALSE))

size_table$Average <- sprintf("£%s", format(size_table$Average, big.mark = ",", scientific = FALSE))

# change the order

size_table <- size_table %>%
  select(RegulatedEntityName, DonorStatus, Frequency, Average, TotalSum)

# Replace repeated party names with empty strings except for the first occurrence
size_table$RegulatedEntityName <- as.character(size_table$RegulatedEntityName)
for (party in unique(size_table$RegulatedEntityName)) {
  party_indices <- which(size_table$RegulatedEntityName == party)
  size_table$RegulatedEntityName[party_indices[-1]] <- ""
}

# swap NA's for blank spaces

size_table$RegulatedEntityName <- as.character(size_table$RegulatedEntityName)

size_table <- size_table %>%
  mutate_all(~ replace_na(., ""))

#create the table

average_donation <- kable(size_table, col.names = c("", "Donor Type", "No. Donations", "Average Size", "Total"), align = 'c') %>%
  kable_styling(full_width = FALSE) %>%
  column_spec(1, width = "4cm", extra_css = "text-align: left;") %>%
  column_spec(2, width = "4cm", extra_css = "text-align: left;") %>%
  column_spec(3, width = "2cm", extra_css = "text-align: center;") %>%
  column_spec(4, width = "3cm", extra_css = "text-align: center;") %>%
  column_spec(5, width = "3cm", extra_css = "text-align: center;")

average_donation

```

### How much was donated on a week by week basis by different donor types?

```{r echo=FALSE}

#create all combos

time_trend_df <- expand.grid(DonorStatus = unique(central_party$DonorStatus),
                             ReportingPeriodName = levels(central_party$ReportingPeriodName))

# add in corresponding values

trend_table <- time_trend_df %>%
  left_join(central_party %>%
              group_by(ReportingPeriodName, DonorStatus) %>%
              summarise(TotalSum = sum(Value, na.rm = TRUE),
                        .groups = 'drop'),
            by = c("ReportingPeriodName", "DonorStatus"))
 
trend_table$TotalSum[is.na(trend_table$TotalSum)] <- 0

# re-order columns

trend_table <- trend_table %>%
  select(ReportingPeriodName, DonorStatus, TotalSum)

# graph

# Create custom hover text
trend_table <- trend_table %>%
  mutate(hover_text = paste("Donor Type:", DonorStatus,
                            "<br>Total Donated:", scales::dollar(TotalSum, prefix = "£", big.mark = ",")))

# create plot

p <- ggplot(trend_table, aes(x = ReportingPeriodName, y = TotalSum, color = DonorStatus, group = DonorStatus, text = hover_text)) +
  geom_line(linewidth = 0.5) +
  geom_point(size = 1) +
  scale_y_continuous(labels = dollar_format(prefix = "£", big.mark = ",")) +
  labs(x = "", y = "", color = "") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_x_discrete(labels = function(x) paste0("Week ", seq_along(x)))

interactive_plot <- ggplotly(p, tooltip = "text")

interactive_plot <- interactive_plot %>%
  layout(legend = list(
    orientation = "h",   # Horizontal legend
    x = 0.5,            # Center horizontally
    xanchor = "center", # Align the center of the legend with x position
    y = -0.2             # Position below the plot
  ))

interactive_plot

```

### Donations not classified as 'pre-poll'

Many donations were made during the electoral time period that were not classified as pre-poll. This is because donations recieved under central party only are required to be disclosed. To get a full picture of what money was moving around during this time outside of those classified as pre-poll, I've explored the following questions:

- Did the main political parties receive any donations in this period that weren't registered as pre-poll?
- If yes, were the nature of these donations disclosed?
- For donations made to the candidates running in individual constituencies, which one's went to swing and safe seats for the Conservative and Labour party?
- Can MP's recieve donations directly?

To collect this data I used the following search term:

- Source: https://search.electoralcommission.org.uk/
- Dates of search: all 2019 quarter 4 donations (by date received by donee)
- *Search was made on the 28th June 2024*

This generated 3,353 items in the search. The 2019_q4_donations.csv file can be found in the data2019 folder in the associated github repo for this webpage.

#### How were donations during this period classified?

Public funds were first removed from the data, leaving 3,286 items. They were then filtered for the pre-poll dates between 06/11/2019 - 12/12/2019, leaving 2,303 cases.

Any money received by a registered political party during this period should have been classified as pre-poll and reported during the time deadlines set by the EC. To check this, the political parties were filtered out from other types of donee's (e.g., MPs or third party groups) to see what reporting period name the donations were placed under.

The 14 parties left with donations received during this time frame were:

- Advance Together (now de-registered)
- Alliance
- Conservative and Unionist Party
- Green Party
- Labour Party
- Liberal Democrats
- Plaid Cymru
- Reform UK
- Scottish Green Party
- Scottish Libertarian Party (now de-registered)
- Renew
- SNP
- The Official Monster Raving Loony Party
- UKIP
- Women's Equality Party

Finally, the data was filtered for those classed under 'central party' in the accounting unit, as donations to specific constituencies did not need to be disclosed by the pre-poll deadlines. This leaves 1,015 cases.

Parties re-submit their prepoll donations at the end of the quarter, meaning there were 229 donations received by parties during this time that were not submitted in the weekly pre-poll reports.

Below is a table that summarises, for each party, what regulatory period were the donations made during this time classed as when they were reported to the EC. The blue column is those that were reported as 'Q4 2019', but were accepted by a central party unit during the pre-poll period between the 6th November and 12th of December 2019.

NEEDS TO BE UPDATED FOR REPEATS.

```{r include=FALSE}

prepoll2019 <- read.csv("data2019/2019_q4_donations.csv")

# remove public funds

prepoll2019 <- prepoll2019 %>%
  filter(!DonorStatus == "Public Fund")

# filter by received date

prepoll2019 <- prepoll2019 %>%
  mutate(ReceivedDate = dmy(ReceivedDate)) %>% 
  filter(ReceivedDate >= dmy("06/11/2019") & ReceivedDate <= dmy("12/12/2019")| is.na(ReceivedDate))

# select variables of interest

prepoll2019 <- prepoll2019 %>%
  select(RegulatedEntityName, RegulatedEntityType, Value, AccountingUnitName, DonorName, DonorStatus, ReceivedDate, AcceptedDate, ReportedDate, ReportingPeriodName, NatureOfDonation)

# shorten names for parties

prepoll2019 <- prepoll2019 %>%
  mutate(RegulatedEntityName = str_replace_all(RegulatedEntityName, fixed("Advance Together [De-registered 01/10/20]"), "Advance Together"),
         RegulatedEntityName = str_replace_all(RegulatedEntityName, fixed("Conservative and Unionist Party"), "Conservative Party"),
         RegulatedEntityName = str_replace_all(RegulatedEntityName, fixed("Plaid Cymru - The Party of Wales"), "Plaid Cymru"),
         RegulatedEntityName = str_replace_all(RegulatedEntityName, fixed("Scottish National Party (SNP)"), "SNP"),
         RegulatedEntityName = str_replace_all(RegulatedEntityName, fixed("Alliance - Alliance Party of Northern Ireland"), "Alliance"),
         RegulatedEntityName = str_replace_all(RegulatedEntityName, fixed("SDLP (Social Democratic & Labour Party)"), "SDLP"),
         RegulatedEntityName = str_replace_all(RegulatedEntityName, fixed("UK Independence Party (UKIP)"), "UKIP"),
         RegulatedEntityName = str_replace_all(RegulatedEntityName, fixed("Scottish Libertarian Party [De-registered 11/11/22]"), "Scottish Libertarian Party")
         )

# filter only the rows where these parties are the donee

prepoll2019 <- prepoll2019 %>%
  filter(RegulatedEntityName == "Advance Together"|
           RegulatedEntityName == "Alliance"|
           RegulatedEntityName == "Conservative Party"|
           RegulatedEntityName == "Green Party"|
           RegulatedEntityName == "Labour Party"|
           RegulatedEntityName == "Liberal Democrats"|
           RegulatedEntityName == "Plaid Cymru"|
           RegulatedEntityName == "Reform UK"|
           RegulatedEntityName == "Renew"|
           RegulatedEntityName == "Scottish Green Party"|
           RegulatedEntityName == "Scottish Libertarian Party"|
           RegulatedEntityName == "SNP"|
           RegulatedEntityName == "The Official Monster Raving Loony Party"|
           RegulatedEntityName == "UKIP"|
           RegulatedEntityName == "Women's Equality Party")

# filter for central party unit

prepoll2019 <- prepoll2019 %>%
  filter(AccountingUnitName == "Central Party")

#set key variables as factors

prepoll2019$RegulatedEntityName <- factor(prepoll2019$RegulatedEntityName, levels = c("Conservative Party", "Labour Party", "Liberal Democrats", "Green Party", "Advance Together", "Reform UK", "Plaid Cymru", "Alliance", "SNP", "Scottish Green Party", "Scottish Libertarian Party", "UKIP", "Renew", "Women's Equality Party", "The Official Monster Raving Loony Party"))

prepoll2019$DonorStatus <- factor(prepoll2019$DonorStatus, levels = c("Individual", "Trade Union", "Company", "Unincorporated Association", "Registered Political Party", "Limited Liability Partnership", "Impermissible Donor"))

prepoll2019$ReportingPeriodName <- factor(prepoll2019$ReportingPeriodName, levels = c("Pre-Poll 1 - Party(06/11/19 - 12/11/19) UKPGE 2019", "Pre-Poll 2 - Party(13/11/19 - 19/11/19) UKPGE 2019", "Pre-Poll 3 - Party(20/11/19 - 26/11/19) UKPGE 2019", "Pre-Poll 4 - Party(27/11/19 - 03/12/19) UKPGE 2019", "Pre-Poll 5 - Party(04/12/19 - 10/12/19) UKPGE 2019", "Pre-Poll 6 - Party(11/12/19 - 12/12/19) UKPGE 2019", "Q4 2019"))

```

```{r include=FALSE}

reporting_freq <- prepoll2019 %>%
  select(RegulatedEntityName, ReportingPeriodName) %>%
  group_by(RegulatedEntityName, ReportingPeriodName) %>%
  summarise(Freq = n(), .groups = 'drop') %>%
  pivot_wider(names_from = ReportingPeriodName, values_from = Freq, values_fill = list(Freq = 0)) %>%
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)), na.rm = TRUE)) %>%
  ungroup()

# add a totals row

freq_totals <- reporting_freq %>%
  summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))) %>%
  mutate(RegulatedEntityName = "Total")

reporting_freq <- rbind(reporting_freq, freq_totals)

# kable table

kable(reporting_freq, escape = FALSE, 
      col.names = c("", "Pre-Poll 1", "Pre-Poll 2", "Pre-Poll 3", "Pre-Poll 4", "Pre-Poll 5", "Pre-Poll 6", "Q4 2019", "Total"), 
      align = 'c') %>%
  kable_styling(full_width = FALSE) %>%
  column_spec(1, width = "5cm") %>%
  column_spec(2:8, extra_css = "text-align: center;") %>%
  column_spec(8, extra_css = "background-color: lightblue;")

```

#### How much were these donations for?

Huge amounts were donated and accepted by the parties in this time period and not included in the pre-poll stats, a total of over 31 million, and half of the total donations received by the conservatives during this time.

```{r include=FALSE}

# Remove £ sign and convert to numeric
prepoll2019$Value <- as.numeric(gsub("[£,\"]", "", prepoll2019$Value))

# create table

reporting_value <- prepoll2019 %>%
  select(RegulatedEntityName, ReportingPeriodName, Value) %>%
  group_by(RegulatedEntityName, ReportingPeriodName) %>%
  summarise(TotalValue = sum(Value), .groups = 'drop') %>%
  pivot_wider(names_from = ReportingPeriodName, values_from = TotalValue, values_fill = list(TotalValue = 0)) %>%
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)), na.rm = TRUE)) %>%
  ungroup()

# Add totals row

value_totals <- reporting_value %>%
  summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))) %>%
  mutate(RegulatedEntityName = "Total")

reporting_value <- rbind(reporting_value, value_totals)

# Apply the formatting to all numeric columns except the first column

reporting_value <- reporting_value %>%
  mutate(across(-1, ~ format_currency(round(.))))

# table

kable(reporting_value, escape = FALSE, 
      col.names = c("", "Pre-Poll 1", "Pre-Poll 2", "Pre-Poll 3", "Pre-Poll 4", "Pre-Poll 5", "Pre-Poll 6", "Q4 2019", "Total"), 
      align = 'c') %>%
  kable_styling(full_width = FALSE) %>%
  column_spec(1, width = "5cm") %>%
  column_spec(8, extra_css = "background-color: lightblue;")

```

### Pre-poll donations reported as 'Q4 2019'

#### Time lag

The graph shows the time lag of how long it took for the donation to be reported to the EC after it was accepted by the party, for all those what were classified as 'Q4 2019' rather than reported within a pre-poll period.

All graphs and tables below filter the data for only those that were classified in the Q4 2019 reporting period.

```{r include=FALSE}

q4_donations <- prepoll2019 %>%
  filter(ReportingPeriodName == "Q4 2019")



```

#### What kind of donors were these donations coming from?

The table below shows, for the total £32,655,503 received by parties in total, what percentage of donor types make up this amount.

```{r echo=FALSE}

# create percentages

q4_percentage <- q4_donations %>%
  select(DonorStatus, Value) %>%
  group_by(DonorStatus) %>%
  summarise(
    TotalValue = sum(Value), 
    Percentage = (sum(Value) / sum(q4_donations$Value)) * 100
  ) %>%
  mutate(
    TotalValue = scales::dollar(TotalValue, prefix = "£", largest_with_cents = 0),
    Percentage = round(Percentage, 1)
  )

# kable table

q4_percentage_t <- kable(q4_percentage, col.names = c("", "Donation Total", "%"), align = 'c') %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))

```

<div style="width: 60%; margin: auto;">

```{r results='asis', echo=FALSE}

q4_percentage_t

```

</div>

#### Amounts received by political parties

The graph below breaks down where these donations were mostly coming from by donor type, showing what type of donors made up the % of donations received. It is not so different from the one's reported as pre-poll, in that donations mostly come from individual and company donors. However, the Lib Dems did receive 8% of their total donations accepted during the pre-poll period and classified under 'Q4 2019' from an impermissible donor.

```{r echo=FALSE}

#group donor status by disclosure of purpose

donor_type_percent <- q4_donations %>%
  group_by(RegulatedEntityName, DonorStatus) %>%
  summarise(Count = n(), TotalValue = sum(Value), .groups = 'drop') %>%
  group_by(RegulatedEntityName) %>%
  mutate(Percentage = TotalValue / sum(TotalValue) * 100) %>%
  ungroup()

#altering display of x-axis labels

donor_type_percent <- donor_type_percent %>%
  mutate(RegulatedEntityName = case_when(
    RegulatedEntityName == "The Official Monster Raving Loony Party" ~ "The Official Monster\n Raving Loony Party",
    TRUE ~ RegulatedEntityName
  ))

#re-order factor

donor_type_percent <- donor_type_percent %>%
  mutate(RegulatedEntityName = factor(RegulatedEntityName, levels = c("Conservative Party", "Labour Party", "Liberal Democrats", "Green Party", "Advance Together", "Reform UK", "Plaid Cymru", "Alliance", "SNP", "Scottish Green Party", "Scottish Libertarian Party", "UKIP", "Renew", "Women's Equality Party", "The Official Monster\n Raving Loony Party")))

# formatting values as money

donor_type_percent <- donor_type_percent %>%
  mutate(TotalValue = scales::dollar(TotalValue, prefix = "£", big.mark = ",", accuracy = 1))

# Add a formatted value column for hover text
donor_type_percent <- donor_type_percent %>%
  mutate(HoverText = paste0("Donor Type: ", DonorStatus, "<br>",
                            "Total Frequency: ", format(Count), "<br>",
                            "Percentage: ", sprintf("%.0f%%", 
                                                    Percentage), "<br>",
                            "Total Value: ", TotalValue, "<br>",
                            "Political Party: ", RegulatedEntityName))

#create a stacked bar chart plot

type_colors <- c(
  "Individual" = "#a6cee3",
  "Company" = "#ff7f00",
  "Trade Union" = "#cab2d6",
  "Registered Political Party" = "#b2df8a",
  "Unincorporated Association" = "#fb9a99",
  "Limited Liability Partnership" = "#6a3d9a",
  "Impermissible Donor" = "#ff33cc"
)

type_p <- ggplot(donor_type_percent, aes(x = RegulatedEntityName, y = Percentage, fill = DonorStatus, text = HoverText)) +
  geom_bar(stat = "identity", position = "fill") +
  scale_y_continuous(labels = scales::percent) +
  scale_fill_manual(values = type_colors) +
  labs(title = "",
       x = "",
       y = "",
       fill = "") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

#interactive plot

type_int <- ggplotly(type_p, tooltip = c("text"))

#customisation

type_int <- type_int %>%
  layout(
    legend = list(
      title = list(text = NULL),  # Remove the legend title
      orientation = "v",          # Vertical legend
      x = 1.02,                   
      xanchor = "left",           # Align to the left
      y = 0.5,                    # Center vertically
      yanchor = "middle",         # Align to the middle
      font = list(size = 10),     # Adjust legend font size
      itemwidth = 30),
    margin = list(r = 120),       
    annotations = list(
      list(
        x = 1,                      # Position on the right
        y = 1,                   # Position below the legend
        text = "Source: Electoral Commission 2024 Donations Data",  
        showarrow = FALSE,          # No arrow
        xref = 'paper',             # Relative to the plotting area
        yref = 'paper',             # Relative to the plotting area
        xanchor = 'right',          # Align text to the right
        yanchor = 'auto',           # Automatic vertical alignment
        font = list(size = 10)      # Adjust annotation font size
      )
    )
  )

type_int


```

The graph below, however, puts these amounts into perspective.

```{r echo=FALSE}

# bar graph with total amounts by each type of donor

df_q4 <- expand.grid(RegulatedEntityName = 
                            levels(q4_donations$RegulatedEntityName), 
                         DonorStatus = 
                           unique(q4_donations$DonorStatus)
                         )

# merge the values with each combo

q4_table <- df_q4 %>%
  left_join(q4_donations %>%
              group_by(RegulatedEntityName, DonorStatus) %>%
            summarise(TotalValue = sum(Value, na.rm = TRUE), 
                      .groups = 'drop'),
            by = c("RegulatedEntityName", "DonorStatus"))

#replace NA with £0
    
q4_table$TotalValue[is.na(q4_table$TotalValue)] <- 0

# create plot, donor type split by party

q4_table <- q4_table %>%
  mutate(RegulatedEntityName = case_when(
    RegulatedEntityName == "The Official Monster Raving Loony Party" ~ "The Official Monster\n Raving Loony Party",
    TRUE ~ RegulatedEntityName
  ))

#re-order factor

q4_table <- q4_table %>%
  mutate(RegulatedEntityName = factor(RegulatedEntityName, levels = c("Conservative Party", "Labour Party", "Liberal Democrats", "Green Party", "Advance Together", "Reform UK", "Plaid Cymru", "Alliance", "SNP", "Scottish Green Party", "Scottish Libertarian Party", "UKIP", "Renew", "Women's Equality Party", "The Official Monster\n Raving Loony Party")))

# Hover text customised

q4_table <- q4_table %>%
  mutate(HoverText = paste0("Total Value: £", format(round(TotalValue, 0), big.mark = ",", scientific = FALSE), "<br>",
                            "Donor Type: ", DonorStatus, "<br>",
                            "Party: ", RegulatedEntityName, "<br>"))

# Create the bar chart
p <- ggplot(q4_table, aes(x = RegulatedEntityName, y = TotalValue, fill = DonorStatus, text = HoverText)) +
  geom_bar(stat = "identity") +
  labs(x = "", y = "", fill = "") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "bottom",
        legend.justification = "center") +
  scale_y_continuous(labels = scales::label_dollar(prefix = "£", big.mark = ",")) +
  scale_fill_brewer(palette = "Set3") 

p <- ggplotly(p, tooltip = c('text'))

p

```




